= Object Pascal: A Collection of Notes and Simple Examples 
:revnumber: 2019.03
:revmark: First issue
:author: William Hunter
:email: whunter.za@gmail.com
:doctype: book
// Generate a table of contents
:toc:
:sectnums:
:sectnumlevels: 4
:reproducible:
:rouge-linenums-mode: table
:source-highlighter: rouge
:listing-caption: Listing
// Uncomment next line to set page size (default is A4)
//:pdf-page-size: Letter

== Asciidoc snippets (not part of this document)
This document iss typeset using http://asciidoc.org[AsciiDoc].
There are some snippets I may want to use later on this page, nothing to do with Object Pascal.

A paragraph followed by a simple list with square bullets.

.A bulleted list (square bullets)
[square]
* item
* item 

//-

.Another list
* item 
* item 
** item 
** item
- item
- item

.Start the below list numbered from 88
[start=88]
. Step four
. Step five
. Step six

CPU:: The brain of the computer.
Hard drive:: Permanent storage for operating system and/or user files.
RAM:: Temporarily stores information the CPU uses during operation.
Keyboard:: Used to enter text or control items on the screen.
Mouse:: Used to point to and select items on your computer screen.
Monitor:: Displays information in visual form using text and graphics.

.Another list
. something
. something
.. something
.. something
. something
 
.Topic Title                                               
[[yourId]]                                                 
//[yourstyle]                                                
____
Example of a quote and using cross-references.
____
You refer to the above by referencing <<yourId>>.

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

[NOTE]
====
A sample note admonition.
We can use gemoji icons in the Asciidoctor markup.
We assign an icon name to the document
attributes `tip-caption`, `note-caption` and `important-caption`.
====

CAUTION: Don't forget to add the `...-caption` document attributes in the header of the document on GitHub.

TIP: It works!

IMPORTANT: Asciidoctor is awesome, don't forget!

WARNING: You have no reason not to use Asciidoctor.



== Introduction
This document focusses on the use of Free Pascal and therefore the Free Pascal Compiler (FPC) and its spinoffs (notably,
the Lazarus IDE). The examples and snippets is mostly a collection of various sources from the internet and other sources,
stuff that I find useful. Therefore, there are Delphi related info in here as well.

== Books and other references
A lot (almost all) of the information, notes and examples in this document are from these resources:

=== Books
. The excellent introductory book by Howard Page-Clark
. Marco Cantu's book on Object Pascal
. Chris Rolliston's books on Delphi XE2

=== Online resources
. https://www.freepascal.org/docs-html/current/ref/ref.html[Free Pascal Reference Guide]
. Free Pascal and Lazarus wiki pages
. http://www.delphibasics.co.uk[Delphi Basics]


== The basics and minimal examples
=== Installing FPC and Lazarus IDE
They can be installed independantly, or just install the Lazarus IDE (FPC is included).

=== How to compile a program using the command line
Simply type
[source, console]
----
fpc program.pp
----
The file extension can be +.pp+ or +.pas+.

You can leave out the extension in the command, in which case the above becomes:
[source, console]
----
fpc program
----

For further details, refer to the Free Pascal User's Guide (Chapter 3 at the time of writing): https://www.freepascal.org/docs.html

[[DoNothing]]
=== The bare minimum for a program
You require at least the following, although it will do nothing.

.A program that will compile, but will do nothing
[source, pascal]
----
program donothing;

begin
  // this is a comment
  // filename is donothing.pas or donothing.pp  
end.
----

=== Hello, World!
Some code that does something (see <<DoNothing>>).
Here's how you say "`Hello, World!`" in Object Pascal:

.A basic "`Hello, World!`" in Pascal
[source, pascal, numbered]
----
{
  helloworld.pas

  2 spaces to indent
  comments can also be inside curly brackets
}

program helloworld;

{$mode objfpc}{$H+} // compiler directive for Free Pascal compiler

begin
  writeln('Hello, World!');
  writeln('Press Enter to continue');
  readln(); // required for Windows cmd to avoid it from disappearing
end.
----

=== Hello, Console!
[source, pascal, numbered]
----
program helloconsole;

{$mode objfpc}{$H+}

uses {$IFDEF UNIX} {$IFDEF UseCThreads}
  cthreads, {$ENDIF} {$ENDIF}
  Classes { you can add units after this };

var
  strMessage: string;

begin
  strMessage := 'Hello, Console!';
  WriteLn(strMessage + sLineBreak + '<Press Enter to exit>');
  ReadLn;
end.
----

=== Case sensitivity
Pascal code is not case sensitive. Whilst this does not make a difference on Windows
platforms, you can potentially run into problems on Linux and Mac if you start mixing
case, because the latter two are case sensitive (unlike Windows).

==== Coding style and syntax
. http://wiki.freepascal.org/Coding_style
. http://jvcl.delphi-jedi.org/StyleGuide.htm
. http://edn.embarcadero.com/article/10280

=== File types
As applicable to Free Pascal (FP) and the Lazarus IDE. It is a good idea to use lower
case and no spaces in file names, for cross-platform compatibility.

==== File extensions
The following file types are usually required to be part of your VCS
(Version Control System), depending on your development platform.

[cols="15,85"]
|=== 
| *Extension* | *Description*
|.pas | Pascal source code file
|.pp | Pascal source code file (useful if you want to avoid confusion with Delphi source code files). You can set this in the IDE.
|.lfm | Lazarus form source file. Analogous to Delphi's dfm files.
|.lpi | Lazarus project information file. Created by Lazarus for every new project.
|.lpr | Lazarus program (or project) file. The source code of the main program. Analogous to Delphi's dpr project file.
|.rc | A Windows resource file (not binary)
|.ico | The main project icon in Windows icon format
|.manifest | Windows-specific manifest file for themes
|=== 

The following files are typically not added to your VCS.
[cols="15,85"]
|=== 
| *Extension*| *Description*
| .lps| Lazarus project settings file. Created by Lazarus for every new project.
| .lrs| Lazarus resource file.
| .compiled| FPC compilation state
| .o| Object file
| .or| Object file
| .ppu| A compiled Unit file
| .res| The result of compiling the rc file (binary)
| .rst| Compiled resource strings. Used for L10n. If you intend to translate an application, this should probably be version controlled
|===

== Programs and units
Blah-Blah

== Classes and objects
A class is user-defined type, it describes the behaviour and characteristics of a group of
similar objects by means of internal methods (functions and procedures) and other data
(fields and attributes, which are really just variables inside (part of) the class).

An object is simply an instance (a single occurrence) of the class.

The relationship between an object and a class is the same the relationship between a
variable and a type. So, if you need a specific type of variable that behaves in a certain
way and has certain characteristics, and it is not available as a 'standard' type, you
simply have to create a class to have instances (or objects) that gives you the desired
behaviour/data.

=== A simple example of a class
Below is a simple definition of a class. Note that the implementation of the method
(in this case, a procedure called Sum) is outside the class definition. The class
definition only includes the method prototypes (definitions), not the actual implementation.
This is for easier readability of the class definition.

[source, pascal, numbered]
----
type
  TCalculator = class
    number: Integer; // note that the "var" keyword is not required inside a class
    procedure Sum;
  end;

procedure TCalculator.Sum;
begin
  Writeln(number + 10);
end;
----

==== How to use classes
Add text here...

=== A more elaborate example
A drawing object class...

[source, pascal, numbered]
----
Program Shapes;
 
Type
   DrawingObject = Class
      x, y : single;
      height, width : double;
      procedure Draw; // procedure declared in here
   end;
 
  procedure DrawingObject.Draw;
  begin
       writeln('Drawing an Object');
       writeln(' x = ', x, ' y = ', y); // object fields
       writeln(' width = ', width);
       writeln(' height = ', height);
       Writeln;
  end;
 
Var
  Rectangle : DrawingObject; // a new variable of type DrawingObject
 
begin
  Rectangle.x := 50;  //  the fields specific to the variable "Rectangle"
  Rectangle.y := 100;
  Rectangle.width := 60;
  Rectangle.height := 40;
 
  writeln('x = ', Rectangle.x);
 
  Rectangle.Draw; // Calling the method (procedure)
 
  with Rectangle do // With works the same way even with the method (procedure) field
   begin
       x:= 75;
       Draw;
   end;
end.
----

=== An even more elaborate example
Some text goes here

== Settings (configuration)


// create PDF by running asciidoctor-pdf filename.adoc
